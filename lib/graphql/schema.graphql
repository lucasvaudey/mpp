type LegumeConst implements ConstElement {
  id: ID!
  label: String!
  defaultBgColor: ColorHex!
  baseHeight: Float!
  baseWidth: Float!
  image: URL!

  """
  Short description of the constants
  """
  description: String!

  """
  Conseils sur les légumes
  """
  advices: [String!]
  sickness: [Sickness!]
  varieties: [Variety!]
  exposition: Exposition!

  """
  Give an array of months
  """
  plantMonth: [Month!]

  """
  Give an array of months
  """
  recolteMonth: [Month!]

  """
  Give an array of months
  """
  semisMonth: [Month!]
  official: Boolean

  """
  Description of the soil needed
  """
  soilDesc: String!

  """
  Description of the culture & entretien needed
  """
  cultureDesc: String!

  """
  Description of the culture & entretien needed
  """
  recolteDesc: String!
  friends: [LegumeConst!]
}

interface ConstElement {
  id: ID!
  label: String!
  defaultBgColor: ColorHex!
  baseHeight: Float!
  baseWidth: Float!
  image: URL!

  """
  Short description of the constants
  """
  description: String!

  """
  Conseils sur les légumes
  """
  advices: [String!]
  sickness: [Sickness!]
  varieties: [Variety!]
  exposition: Exposition!

  """
  Give an array of months
  """
  plantMonth: [Month!]

  """
  Give an array of months
  """
  recolteMonth: [Month!]

  """
  Give an array of months
  """
  semisMonth: [Month!]
  official: Boolean
}

"""
Hexadecimal Color
"""
scalar ColorHex

"""
The URL scalar type represents URL addresses.
"""
scalar URL

type Sickness {
  id: ID!
  label: String!
  description: String!
  constants: [ConstElement!]
}

type Variety {
  id: ID!
  image: URL!
  label: String!
  description: String!
  constant: ConstElement!
}

"""
Exposition type
"""
enum Exposition {
  SOLEIL
  OMBRE
  MI_OMBRE
}

"""
Months of the year
"""
enum Month {
  JANVIER
  FEVRIER
  MARS
  AVRIL
  MAI
  JUIN
  JUILLET
  AOUT
  SEPTEMBRE
  OCTOBRE
  NOVEMBRE
  DECEMBRE
}

type AromatConst implements ConstElement {
  id: ID!
  label: String!
  defaultBgColor: ColorHex!
  baseHeight: Float!
  baseWidth: Float!
  image: URL!

  """
  Short description of the constants
  """
  description: String!

  """
  Conseils sur les légumes
  """
  advices: [String!]
  sickness: [Sickness!]
  varieties: [Variety!]
  exposition: Exposition!

  """
  Give an array of months
  """
  plantMonth: [Month!]

  """
  Give an array of months
  """
  recolteMonth: [Month!]

  """
  Give an array of months
  """
  semisMonth: [Month!]
  official: Boolean

  """
  Description of the soil needed
  """
  soilDesc: String!
}

type ArbreConst implements ConstElement {
  id: ID!
  label: String!
  defaultBgColor: ColorHex!
  baseHeight: Float!
  baseWidth: Float!
  image: URL!

  """
  Short description of the constants
  """
  description: String!

  """
  Conseils sur les légumes
  """
  advices: [String!]
  sickness: [Sickness!]
  varieties: [Variety!]
  exposition: Exposition!

  """
  Give an array of months
  """
  plantMonth: [Month!]

  """
  Give an array of months
  """
  recolteMonth: [Month!]

  """
  Give an array of months
  """
  semisMonth: [Month!]
  official: Boolean

  """
  Description of the climat needed
  """
  climatDesc: String!

  """
  Description of the culture & entretien needed
  """
  tailleDesc: String!

  """
  Description of the culture & entretien needed
  """
  recolteDesc: String!

  """
  Give an array of months
  """
  tailleMonth: [Int!]!
  rusticity: Rusticity!
}

"""
Rusticity type
"""
enum Rusticity {
  TRES_RUSTIQUE
  RUSTIQUE
  PEU_RUSTIQUE
}

type Query {
  me: User
  const(id: Int!): ConstElement
  consts(pageNumber: Int!, numberInPage: Int!): [ConstElement!]
}

type User {
  id: ID!
  email: String!
  pseudo: String!
  updateAt: DateTime!
  createdAt: DateTime!
  premium: Boolean!
  admin: Boolean!
  terrains: [Terrain!]
  semis: [Semis!]
  posts: [Post!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Terrain {
  id: ID!
  height: Float!
  width: Float!
  bgColor: ColorHex!
  placeables: [Placeable!]
  user: User!
}

type Placeable {
  id: ID!
  posX: Float
  posY: Float
  label: String!
  subName: String
  bgColor: ColorHex!
  recolteDate: DateTime!
  plantDate: DateTime!
  reminders: [Reminder!]
  height: Float!
  width: Float!
  image: URL
  constant: ConstElement!
  type: PlaceableType!
  pot: Boolean
  terrain: Terrain!
}

type Reminder {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  endDate: DateTime!
  done: Boolean
  plannedNotifs: [PlannedNotif!]
  placeable: Placeable!
}

type PlannedNotif {
  date: DateTime!
  scheduled: Boolean!
  reminder: Reminder!
}

"""
Placeable type of the element
"""
enum PlaceableType {
  ARBRE
  LEGUME
  AROMAT
  CUSTOM
}

type Semis {
  id: ID!
  label: String!
  column: Int!
  row: Int!
  elements: [SemiElement!]!
  user: User!
}

type SemiElement {
  id: ID!
  label: String!
  recolteDate: DateTime!
  plantDate: DateTime!
  posColumn: Int!
  posRow: Int!
  image: URL!
  semis: Semis!
}

type Post {
  id: Int!
  title: String!
  content: String!
  url: URL
  user: User!
}

type Mutation {
  addPlaceable(
    constId: Float!
    terrainId: Float!
    placeable: PlaceableInput!
  ): Boolean!
  addCustomPlaceable(
    terrainId: Float!
    placeable: PlaceableInput!
  ): BoolResponse!
  removePlaceable(id: Float!): Boolean!
  updatePlaceable(input: PlaceableInput!, placeableID: Float!): Boolean!
  addTerrain(terrain: TerrainInput!): Boolean!
  removeTerrain(id: ID!): Boolean!
  updateTerrain(id: ID!, input: TerrainUpdateInput!): Boolean!
  addReminder(notifInput: ReminderInput!, placeableId: Float!): BoolResponse!
  deleteReminder(reminderId: Float!): BoolResponse!
  updateReminder(input: ReminderInput!, reminderId: Float!): BoolResponse!
  changePassword(
    newPerssword: String!
    oldPassword: String!
  ): ConnectionResponse!
  refreshToken: ConnectionResponse!
  connect(password: String!, emailOrUsername: String!): ConnectionResponse!
  register(
    password: String!
    pseudo: String!
    email: String!
  ): ConnectionResponse!
  deleteUser(id: ID!): BoolResponse!

  """
  Update user data, if id null update connected user
  """
  updateUser(input: UserInput!, id: ID): BoolResponse!
  addConst(image: Upload!, constant: ConstInput!): Boolean!
  removeConst(id: Int!): Boolean!
  updateConst(id: Int!, input: ConstInput!): Boolean!
}

input PlaceableInput {
  label: String
  bgColor: ColorHex
  width: Float
  height: Float
  recolteDate: DateTime!

  """
  Mis à aujourd'hui si null
  """
  plantDate: DateTime
  reminders: [ReminderInput!]
}

input ReminderInput {
  plannedNotif: [PlannedNotifInput!]
  endDate: DateTime!
  done: Boolean!
}

input PlannedNotifInput {
  date: DateTime!
  scheduled: Boolean!
}

type BoolResponse {
  success: Boolean!
  error: CustomError
}

type CustomError {
  label: String!
  message: String!
}

input TerrainInput {
  width: Float!
  height: Float!
  bgColor: ColorHex!
}

input TerrainUpdateInput {
  width: Float
  height: Float
  bgColor: ColorHex
}

type ConnectionResponse {
  token: Token
  error: CustomError
  user: User
}

type Token {
  access: String!
  refresh: String!
}

input UserInput {
  email: String
  pseudo: String
  admin: Boolean
  premium: Boolean
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ConstInput {
  legume: LegumeConstInput
  arbre: ArbreConstInput
  aromat: AromatConstInput
}

input LegumeConstInput {
  label: String!
  defaultBgColor: ColorHex!
  baseHeight: Float!
  baseWidth: Float!
  description: String!
  cultureDesc: String!
  advices: [String!]!
  plantMonth: [Month!]!
  recolteDesc: String!
  recolteMonth: [Month!]!
  semisMonth: [Month!]!
  soilDesc: String!
  exposition: Exposition!
}

input ArbreConstInput {
  label: String!
  defaultBgColor: ColorHex!
  baseHeight: Float!
  baseWidth: Float!
  description: String!

  """
  Description of the climat needed
  """
  climatDesc: String!

  """
  Description of the culture & entretien needed
  """
  tailleDesc: String!

  """
  Description of the culture & entretien needed
  """
  recolteDesc: String!

  """
  Give an array of months
  """
  tailleMonth: [Int!]!
  rusticity: Rusticity!

  """
  Description of the soil needed
  """
  soilDesc: String!

  """
  Conseils sur les légumes
  """
  advices: [String!]
  exposition: Exposition!

  """
  Give an array of months
  """
  plantMonth: [Month!]!

  """
  Give an array of months
  """
  recolteMonth: [Month!]!

  """
  Give an array of months
  """
  semisMonth: [Month!]!
}

input AromatConstInput {
  label: String!
  defaultBgColor: ColorHex!
  baseHeight: Float!
  baseWidth: Float!
  description: String!

  """
  Description of the soil needed
  """
  soilDesc: String!

  """
  Conseils sur les légumes
  """
  advices: [String!]
  exposition: Exposition!

  """
  Give an array of months
  """
  plantMonth: [Month!]!

  """
  Give an array of months
  """
  recolteMonth: [Month!]!

  """
  Give an array of months
  """
  semisMonth: [Month!]!
}
